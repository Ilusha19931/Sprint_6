{"name": "test_text_in_object_1[0-expected_words0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-accordion-component=\"AccordionItemHeading\" role=\"heading\" class=\"accordion__heading\" aria-level=\"3\">...</div> is not clickable at point (598, 248). Other element would receive the click: <img src=\"/assets/scooter.png\" alt=\"Scooter blueprint\">\n  (Session info: chrome=131.0.6778.69)\nStacktrace:\n\tGetHandleVerifier [0x00007FF77F132775+28773]\n\t(No symbol) [0x00007FF77F09AFB0]\n\t(No symbol) [0x00007FF77EF3552A]\n\t(No symbol) [0x00007FF77EF90B5E]\n\t(No symbol) [0x00007FF77EF8E5FC]\n\t(No symbol) [0x00007FF77EF8B7E6]\n\t(No symbol) [0x00007FF77EF8A741]\n\t(No symbol) [0x00007FF77EF7C970]\n\t(No symbol) [0x00007FF77EFAEF9A]\n\t(No symbol) [0x00007FF77EF7C1C6]\n\t(No symbol) [0x00007FF77EFAF1B0]\n\t(No symbol) [0x00007FF77EFCF1A4]\n\t(No symbol) [0x00007FF77EFAED43]\n\t(No symbol) [0x00007FF77EF7A548]\n\t(No symbol) [0x00007FF77EF7B6B1]\n\tGetHandleVerifier [0x00007FF77F45F45D+3358029]\n\tGetHandleVerifier [0x00007FF77F47430D+3443709]\n\tGetHandleVerifier [0x00007FF77F4683FD+3394797]\n\tGetHandleVerifier [0x00007FF77F1F929B+842635]\n\t(No symbol) [0x00007FF77F0A654F]\n\t(No symbol) [0x00007FF77F0A1FA4]\n\t(No symbol) [0x00007FF77F0A213D]\n\t(No symbol) [0x00007FF77F091629]\n\tBaseThreadInitThunk [0x00007FFDC284257D+29]\n\tRtlUserThreadStart [0x00007FFDC302AF08+40]", "trace": "self = <tests.test_main_page_question.TestQuestionText object at 0x0000015AB0F60E00>, index = 0, expected_words = ['Сутки — 400 рублей. Оплата курьеру — наличными или картой.']\n\n    @pytest.mark.parametrize('index, expected_words', [\n            (0, [\"Сутки — 400 рублей. Оплата курьеру — наличными или картой.\"]),\n            (1, [\"Пока что у нас так: один заказ — один самокат. Если хотите покататься с друзьями, можете просто сделать несколько заказов — один за другим.\"]),\n            (2, [\"Допустим, вы оформляете заказ на 8 мая. Мы привозим самокат 8 мая в течение дня. Отсчёт времени аренды начинается с момента, когда вы оплатите заказ курьеру. Если мы привезли самокат 8 мая в 20:30, суточная аренда закончится 9 мая в 20:30.\"]),\n            (3, [\"Только начиная с завтрашнего дня. Но скоро станем расторопнее.\"]),\n            (4, [\"Пока что нет! Но если что-то срочное — всегда можно позвонить в поддержку по красивому номеру 1010.\"]),\n            (5, [\"Самокат приезжает к вам с полной зарядкой. Этого хватает на восемь суток — даже если будете кататься без передышек и во сне. Зарядка не понадобится.\"]),\n            (6, [\"Да, пока самокат не привезли. Штрафа не будет, объяснительной записки тоже не попросим. Все же свои.\"]),\n            (7, [\"Да, обязательно. Всем самокатов! И Москве, и Московской области.\"])])\n    \n    def test_text_in_object_1(self, index, expected_words):\n    \n    \n        self.driver.get(UrelsSamokati.BASE_URL)\n        scroll_to_element = MainPageQuestion(self.driver)\n    \n        scroll_to_element.scroll_to_last_question()\n>       scroll_to_element.click_question_form(index)\n\ntests\\test_main_page_question.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\main_page_question.py:20: in click_question_form\n    self.driver.find_elements(*button_with_question)[index].click()\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:380: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000015AB3373320>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF77F091629]\\\\n\\\\tBaseThreadInitThunk [0x00007FFDC284257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFDC302AF08+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div data-accordion-component=\"AccordionItemHeading\" role=\"heading\" class=\"accordion__heading\" aria-level=\"3\">...</div> is not clickable at point (598, 248). Other element would receive the click: <img src=\"/assets/scooter.png\" alt=\"Scooter blueprint\">\nE         (Session info: chrome=131.0.6778.69)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF77F132775+28773]\nE       \t(No symbol) [0x00007FF77F09AFB0]\nE       \t(No symbol) [0x00007FF77EF3552A]\nE       \t(No symbol) [0x00007FF77EF90B5E]\nE       \t(No symbol) [0x00007FF77EF8E5FC]\nE       \t(No symbol) [0x00007FF77EF8B7E6]\nE       \t(No symbol) [0x00007FF77EF8A741]\nE       \t(No symbol) [0x00007FF77EF7C970]\nE       \t(No symbol) [0x00007FF77EFAEF9A]\nE       \t(No symbol) [0x00007FF77EF7C1C6]\nE       \t(No symbol) [0x00007FF77EFAF1B0]\nE       \t(No symbol) [0x00007FF77EFCF1A4]\nE       \t(No symbol) [0x00007FF77EFAED43]\nE       \t(No symbol) [0x00007FF77EF7A548]\nE       \t(No symbol) [0x00007FF77EF7B6B1]\nE       \tGetHandleVerifier [0x00007FF77F45F45D+3358029]\nE       \tGetHandleVerifier [0x00007FF77F47430D+3443709]\nE       \tGetHandleVerifier [0x00007FF77F4683FD+3394797]\nE       \tGetHandleVerifier [0x00007FF77F1F929B+842635]\nE       \t(No symbol) [0x00007FF77F0A654F]\nE       \t(No symbol) [0x00007FF77F0A1FA4]\nE       \t(No symbol) [0x00007FF77F0A213D]\nE       \t(No symbol) [0x00007FF77F091629]\nE       \tBaseThreadInitThunk [0x00007FFDC284257D+29]\nE       \tRtlUserThreadStart [0x00007FFDC302AF08+40]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "parameters": [{"name": "index", "value": "0"}, {"name": "expected_words", "value": "['Сутки — 400 рублей. Оплата курьеру — наличными или картой.']"}], "start": 1731927006789, "stop": 1731927016273, "uuid": "8922d668-6b0c-43c4-91df-975e22b17b61", "historyId": "36c7caa0c046f3cec0d714fcde792891", "testCaseId": "43ba184e2c965a407d1a107690f63931", "fullName": "tests.test_main_page_question.TestQuestionText#test_text_in_object_1", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_main_page_question"}, {"name": "subSuite", "value": "TestQuestionText"}, {"name": "host", "value": "DESKTOP-R4M87S0"}, {"name": "thread", "value": "400-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_main_page_question"}]}